"""add cohort_id to courses

Revision ID: eac995c26eef
Revises: 8645c892b9a0
Create Date: 2024-12-03 17:02:54.737271

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "eac995c26eef"
down_revision: Union[str, None] = "8645c892b9a0"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Drop foreign key constraints first
    op.drop_constraint(
        "class_enrollments_class_id_fkey", "class_enrollments", type_="foreignkey"
    )
    op.drop_constraint("courses_class_id_fkey", "courses", type_="foreignkey")

    # Drop the tables
    op.drop_table("class_enrollments")
    op.drop_table("classes")

    # Add new column and constraints
    op.add_column("courses", sa.Column("cohort_id", sa.UUID(), nullable=False))
    op.create_foreign_key(None, "courses", "cohorts", ["cohort_id"], ["id"])
    op.drop_column("courses", "class_id")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "courses", sa.Column("class_id", sa.UUID(), autoincrement=False, nullable=False)
    )
    op.drop_constraint(None, "courses", type_="foreignkey")
    op.create_foreign_key(
        "courses_class_id_fkey", "courses", "classes", ["class_id"], ["id"]
    )
    op.drop_column("courses", "cohort_id")
    op.create_table(
        "class_enrollments",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("class_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("student_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("active", "completed", "dropped", name="enrollment_status"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "enrolled_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "last_modified",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["class_id"], ["classes.id"], name="class_enrollments_class_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["student_id"], ["users.id"], name="class_enrollments_student_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="class_enrollments_pkey"),
    )
    op.create_table(
        "classes",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("teacher_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "last_modified",
            postgresql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["teacher_id"], ["users.id"], name="classes_teacher_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="classes_pkey"),
    )
